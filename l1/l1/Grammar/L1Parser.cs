//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from L1.g4 by ANTLR 4.9

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9")]
[System.CLSCompliant(false)]
public partial class L1Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, NUMBER=42, STRING=43, BOOLEAN=44, IDENT=45, 
		WHITESPACE=46;
	public const int
		RULE_program = 0, RULE_function = 1, RULE_type = 2, RULE_var_list = 3, 
		RULE_function_body = 4, RULE_fact_params = 5, RULE_op_definition = 6, 
		RULE_op_assign = 7, RULE_op_func_call = 8, RULE_op_if = 9, RULE_op_while_pre = 10, 
		RULE_op_while_post = 11, RULE_op_assert = 12, RULE_stmt = 13, RULE_cond = 14, 
		RULE_expr = 15, RULE_xor_expr = 16, RULE_and_expr = 17, RULE_arith_expr = 18, 
		RULE_term = 19, RULE_factor = 20, RULE_power = 21, RULE_atom_expr = 22;
	public static readonly string[] ruleNames = {
		"program", "function", "type", "var_list", "function_body", "fact_params", 
		"op_definition", "op_assign", "op_func_call", "op_if", "op_while_pre", 
		"op_while_post", "op_assert", "stmt", "cond", "expr", "xor_expr", "and_expr", 
		"arith_expr", "term", "factor", "power", "atom_expr"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'define'", "'('", "')'", "'end'", "'void'", "'int'", "'char'", 
		"'bool'", "'int array'", "'char array'", "'bool array'", "','", "'return'", 
		"'\n'", "':='", "'if'", "'then'", "'elseif'", "'else'", "'while'", "'do'", 
		"'assert'", "'='", "'<'", "'>'", "'>='", "'<='", "'<>'", "'xor'", "'or'", 
		"'and'", "'+'", "'-'", "'mod'", "'/'", "'*'", "'**'", "'['", "']'", "'new'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "NUMBER", "STRING", "BOOLEAN", "IDENT", 
		"WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "L1.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static L1Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public L1Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public L1Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 46; function();
				State = 47; Match(T__0);
				}
				}
				State = 51;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__1 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(L1Parser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Var_listContext var_list() {
			return GetRuleContext<Var_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_bodyContext function_body() {
			return GetRuleContext<Function_bodyContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 2, RULE_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53; Match(T__1);
			State = 54; type();
			State = 55; Match(IDENT);
			State = 56; Match(T__2);
			State = 57; var_list();
			State = 58; Match(T__3);
			State = 59; function_body();
			State = 60; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.ExitType(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 4, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENT() { return GetTokens(L1Parser.IDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT(int i) {
			return GetToken(L1Parser.IDENT, i);
		}
		public Var_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.EnterVar_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.ExitVar_list(this);
		}
	}

	[RuleVersion(0)]
	public Var_listContext var_list() {
		Var_listContext _localctx = new Var_listContext(Context, State);
		EnterRule(_localctx, 6, RULE_var_list);
		int _la;
		try {
			State = 76;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
				EnterOuterAlt(_localctx, 2);
				{
				State = 65; type();
				State = 66; Match(IDENT);
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__12) {
					{
					{
					State = 67; Match(T__12);
					State = 68; type();
					State = 69; Match(IDENT);
					}
					}
					State = 75;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public Function_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.EnterFunction_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.ExitFunction_body(this);
		}
	}

	[RuleVersion(0)]
	public Function_bodyContext function_body() {
		Function_bodyContext _localctx = new Function_bodyContext(Context, State);
		EnterRule(_localctx, 8, RULE_function_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__16) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << IDENT))) != 0)) {
				{
				{
				State = 78; stmt();
				State = 79; Match(T__0);
				}
				}
				State = 85;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 86; Match(T__13);
			State = 87; expr();
			State = 88; Match(T__0);
			State = 89; Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fact_paramsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Fact_paramsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fact_params; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.EnterFact_params(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.ExitFact_params(this);
		}
	}

	[RuleVersion(0)]
	public Fact_paramsContext fact_params() {
		Fact_paramsContext _localctx = new Fact_paramsContext(Context, State);
		EnterRule(_localctx, 10, RULE_fact_params);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__33:
			case T__40:
			case NUMBER:
			case STRING:
			case BOOLEAN:
			case IDENT:
				{
				State = 96;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 91; expr();
						State = 92; Match(T__12);
						}
						} 
					}
					State = 98;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
				}
				State = 99; expr();
				}
				break;
			case T__3:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(L1Parser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Op_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.EnterOp_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.ExitOp_definition(this);
		}
	}

	[RuleVersion(0)]
	public Op_definitionContext op_definition() {
		Op_definitionContext _localctx = new Op_definitionContext(Context, State);
		EnterRule(_localctx, 12, RULE_op_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103; type();
			State = 104; Match(IDENT);
			State = 105; Match(T__15);
			State = 106; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_assignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(L1Parser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Op_assignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_assign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.EnterOp_assign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.ExitOp_assign(this);
		}
	}

	[RuleVersion(0)]
	public Op_assignContext op_assign() {
		Op_assignContext _localctx = new Op_assignContext(Context, State);
		EnterRule(_localctx, 14, RULE_op_assign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108; Match(IDENT);
			State = 109; Match(T__15);
			State = 110; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_func_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(L1Parser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Fact_paramsContext fact_params() {
			return GetRuleContext<Fact_paramsContext>(0);
		}
		public Op_func_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_func_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.EnterOp_func_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.ExitOp_func_call(this);
		}
	}

	[RuleVersion(0)]
	public Op_func_callContext op_func_call() {
		Op_func_callContext _localctx = new Op_func_callContext(Context, State);
		EnterRule(_localctx, 16, RULE_op_func_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112; Match(IDENT);
			State = 113; Match(T__2);
			State = 114; fact_params();
			State = 115; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_ifContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CondContext[] cond() {
			return GetRuleContexts<CondContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondContext cond(int i) {
			return GetRuleContext<CondContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public Op_ifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.EnterOp_if(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.ExitOp_if(this);
		}
	}

	[RuleVersion(0)]
	public Op_ifContext op_if() {
		Op_ifContext _localctx = new Op_ifContext(Context, State);
		EnterRule(_localctx, 18, RULE_op_if);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117; Match(T__16);
			State = 118; cond();
			State = 119; Match(T__17);
			State = 123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__16) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << IDENT))) != 0)) {
				{
				{
				State = 120; stmt();
				}
				}
				State = 125;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 137;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__18) {
				{
				{
				State = 126; Match(T__18);
				State = 127; cond();
				State = 128; Match(T__17);
				State = 132;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__16) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << IDENT))) != 0)) {
					{
					{
					State = 129; stmt();
					}
					}
					State = 134;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 140; Match(T__19);
				State = 144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__16) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << IDENT))) != 0)) {
					{
					{
					State = 141; stmt();
					}
					}
					State = 146;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 149; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_while_preContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CondContext cond() {
			return GetRuleContext<CondContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public Op_while_preContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_while_pre; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.EnterOp_while_pre(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.ExitOp_while_pre(this);
		}
	}

	[RuleVersion(0)]
	public Op_while_preContext op_while_pre() {
		Op_while_preContext _localctx = new Op_while_preContext(Context, State);
		EnterRule(_localctx, 20, RULE_op_while_pre);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151; Match(T__20);
			State = 152; cond();
			State = 153; Match(T__21);
			State = 157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__16) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << IDENT))) != 0)) {
				{
				{
				State = 154; stmt();
				}
				}
				State = 159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 160; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_while_postContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CondContext cond() {
			return GetRuleContext<CondContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public Op_while_postContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_while_post; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.EnterOp_while_post(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.ExitOp_while_post(this);
		}
	}

	[RuleVersion(0)]
	public Op_while_postContext op_while_post() {
		Op_while_postContext _localctx = new Op_while_postContext(Context, State);
		EnterRule(_localctx, 22, RULE_op_while_post);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 162; Match(T__21);
			State = 168;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 163; stmt();
					State = 164; Match(T__0);
					}
					} 
				}
				State = 170;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			State = 171; Match(T__20);
			State = 172; cond();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_assertContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CondContext cond() {
			return GetRuleContext<CondContext>(0);
		}
		public Op_assertContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_assert; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.EnterOp_assert(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.ExitOp_assert(this);
		}
	}

	[RuleVersion(0)]
	public Op_assertContext op_assert() {
		Op_assertContext _localctx = new Op_assertContext(Context, State);
		EnterRule(_localctx, 24, RULE_op_assert);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174; Match(T__22);
			State = 175; cond();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Op_definitionContext op_definition() {
			return GetRuleContext<Op_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_assignContext op_assign() {
			return GetRuleContext<Op_assignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_func_callContext op_func_call() {
			return GetRuleContext<Op_func_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_ifContext op_if() {
			return GetRuleContext<Op_ifContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_while_preContext op_while_pre() {
			return GetRuleContext<Op_while_preContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_while_postContext op_while_post() {
			return GetRuleContext<Op_while_postContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_assertContext op_assert() {
			return GetRuleContext<Op_assertContext>(0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.EnterStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.ExitStmt(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 26, RULE_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 177; op_definition();
				}
				break;
			case 2:
				{
				State = 178; op_assign();
				}
				break;
			case 3:
				{
				State = 179; op_func_call();
				}
				break;
			case 4:
				{
				State = 180; op_if();
				}
				break;
			case 5:
				{
				State = 181; op_while_pre();
				}
				break;
			case 6:
				{
				State = 182; op_while_post();
				}
				break;
			case 7:
				{
				State = 183; op_assert();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public CondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cond; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.EnterCond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.ExitCond(this);
		}
	}

	[RuleVersion(0)]
	public CondContext cond() {
		CondContext _localctx = new CondContext(Context, State);
		EnterRule(_localctx, 28, RULE_cond);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186; expr();
			State = 189;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28))) != 0)) {
				{
				State = 187;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 188; expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Xor_exprContext[] xor_expr() {
			return GetRuleContexts<Xor_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xor_exprContext xor_expr(int i) {
			return GetRuleContext<Xor_exprContext>(i);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 30, RULE_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191; xor_expr();
			State = 196;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__29 || _la==T__30) {
				{
				{
				State = 192;
				_la = TokenStream.LA(1);
				if ( !(_la==T__29 || _la==T__30) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 193; xor_expr();
				}
				}
				State = 198;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xor_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public And_exprContext[] and_expr() {
			return GetRuleContexts<And_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public And_exprContext and_expr(int i) {
			return GetRuleContext<And_exprContext>(i);
		}
		public Xor_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xor_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.EnterXor_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.ExitXor_expr(this);
		}
	}

	[RuleVersion(0)]
	public Xor_exprContext xor_expr() {
		Xor_exprContext _localctx = new Xor_exprContext(Context, State);
		EnterRule(_localctx, 32, RULE_xor_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199; and_expr();
			State = 204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__31) {
				{
				{
				State = 200; Match(T__31);
				State = 201; and_expr();
				}
				}
				State = 206;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class And_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Arith_exprContext[] arith_expr() {
			return GetRuleContexts<Arith_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arith_exprContext arith_expr(int i) {
			return GetRuleContext<Arith_exprContext>(i);
		}
		public And_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.EnterAnd_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.ExitAnd_expr(this);
		}
	}

	[RuleVersion(0)]
	public And_exprContext and_expr() {
		And_exprContext _localctx = new And_exprContext(Context, State);
		EnterRule(_localctx, 34, RULE_and_expr);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 207; arith_expr();
			State = 212;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 208; Match(T__31);
					State = 209; arith_expr();
					}
					} 
				}
				State = 214;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arith_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public Arith_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arith_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.EnterArith_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.ExitArith_expr(this);
		}
	}

	[RuleVersion(0)]
	public Arith_exprContext arith_expr() {
		Arith_exprContext _localctx = new Arith_exprContext(Context, State);
		EnterRule(_localctx, 36, RULE_arith_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215; term();
			State = 220;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__32 || _la==T__33) {
				{
				{
				State = 216;
				_la = TokenStream.LA(1);
				if ( !(_la==T__32 || _la==T__33) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 217; term();
				}
				}
				State = 222;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 38, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223; factor();
			State = 228;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__34) | (1L << T__35) | (1L << T__36))) != 0)) {
				{
				{
				State = 224;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__34) | (1L << T__35) | (1L << T__36))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 225; factor();
				}
				}
				State = 230;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PowerContext power() {
			return GetRuleContext<PowerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 40, RULE_factor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__40:
			case NUMBER:
			case STRING:
			case BOOLEAN:
			case IDENT:
				{
				State = 231; power();
				}
				break;
			case T__33:
				{
				State = 232; Match(T__33);
				State = 233; factor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PowerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Atom_exprContext atom_expr() {
			return GetRuleContext<Atom_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public PowerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_power; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.EnterPower(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.ExitPower(this);
		}
	}

	[RuleVersion(0)]
	public PowerContext power() {
		PowerContext _localctx = new PowerContext(Context, State);
		EnterRule(_localctx, 42, RULE_power);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236; atom_expr();
			State = 239;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__37) {
				{
				State = 237; Match(T__37);
				State = 238; factor();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Atom_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(L1Parser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(L1Parser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(L1Parser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(L1Parser.BOOLEAN, 0); }
		public Atom_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.EnterAtom_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.ExitAtom_expr(this);
		}
	}

	[RuleVersion(0)]
	public Atom_exprContext atom_expr() {
		Atom_exprContext _localctx = new Atom_exprContext(Context, State);
		EnterRule(_localctx, 44, RULE_atom_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 241; Match(IDENT);
				State = 242; Match(T__38);
				State = 243; expr();
				State = 244; Match(T__39);
				}
				break;
			case 2:
				{
				State = 246; Match(IDENT);
				State = 247; Match(T__38);
				State = 248; expr();
				State = 249; Match(T__39);
				}
				break;
			case 3:
				{
				State = 251; Match(T__40);
				State = 252; type();
				State = 253; Match(T__38);
				State = 254; expr();
				State = 255; Match(T__39);
				}
				break;
			case 4:
				{
				State = 257; Match(IDENT);
				}
				break;
			case 5:
				{
				State = 258; Match(NUMBER);
				}
				break;
			case 6:
				{
				State = 259; Match(STRING);
				}
				break;
			case 7:
				{
				State = 260; Match(BOOLEAN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x30', '\x10A', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x6', '\x2', '\x34', 
		'\n', '\x2', '\r', '\x2', '\xE', '\x2', '\x35', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\a', '\x5', 'J', '\n', '\x5', '\f', '\x5', '\xE', '\x5', 
		'M', '\v', '\x5', '\x5', '\x5', 'O', '\n', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\a', '\x6', 'T', '\n', '\x6', '\f', '\x6', '\xE', 
		'\x6', 'W', '\v', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', 
		'\x61', '\n', '\a', '\f', '\a', '\xE', '\a', '\x64', '\v', '\a', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', 'h', '\n', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', 
		'\v', '|', '\n', '\v', '\f', '\v', '\xE', '\v', '\x7F', '\v', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\x85', '\n', 
		'\v', '\f', '\v', '\xE', '\v', '\x88', '\v', '\v', '\a', '\v', '\x8A', 
		'\n', '\v', '\f', '\v', '\xE', '\v', '\x8D', '\v', '\v', '\x3', '\v', 
		'\x3', '\v', '\a', '\v', '\x91', '\n', '\v', '\f', '\v', '\xE', '\v', 
		'\x94', '\v', '\v', '\x5', '\v', '\x96', '\n', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', '\f', 
		'\x9E', '\n', '\f', '\f', '\f', '\xE', '\f', '\xA1', '\v', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\a', '\r', '\xA9', '\n', '\r', '\f', '\r', '\xE', '\r', '\xAC', '\v', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xBB', '\n', 
		'\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\xC0', 
		'\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', 
		'\xC5', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\xC8', '\v', '\x11', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\a', '\x12', '\xCD', '\n', 
		'\x12', '\f', '\x12', '\xE', '\x12', '\xD0', '\v', '\x12', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\a', '\x13', '\xD5', '\n', '\x13', '\f', 
		'\x13', '\xE', '\x13', '\xD8', '\v', '\x13', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\a', '\x14', '\xDD', '\n', '\x14', '\f', '\x14', '\xE', 
		'\x14', '\xE0', '\v', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\a', '\x15', '\xE5', '\n', '\x15', '\f', '\x15', '\xE', '\x15', '\xE8', 
		'\v', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', 
		'\xED', '\n', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', 
		'\x17', '\xF2', '\n', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x108', '\n', '\x18', '\x3', 
		'\x18', '\x2', '\x2', '\x19', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', 
		'$', '&', '(', '*', ',', '.', '\x2', '\a', '\x3', '\x2', '\b', '\xE', 
		'\x3', '\x2', '\x1A', '\x1F', '\x3', '\x2', ' ', '!', '\x3', '\x2', '#', 
		'$', '\x3', '\x2', '%', '\'', '\x2', '\x113', '\x2', '\x33', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\x37', '\x3', '\x2', '\x2', '\x2', '\x6', '@', '\x3', 
		'\x2', '\x2', '\x2', '\b', 'N', '\x3', '\x2', '\x2', '\x2', '\n', 'U', 
		'\x3', '\x2', '\x2', '\x2', '\f', 'g', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'i', '\x3', '\x2', '\x2', '\x2', '\x10', 'n', '\x3', '\x2', '\x2', '\x2', 
		'\x12', 'r', '\x3', '\x2', '\x2', '\x2', '\x14', 'w', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\x99', '\x3', '\x2', '\x2', '\x2', '\x18', '\xA4', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\xB0', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\xBA', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xBC', '\x3', '\x2', '\x2', 
		'\x2', ' ', '\xC1', '\x3', '\x2', '\x2', '\x2', '\"', '\xC9', '\x3', '\x2', 
		'\x2', '\x2', '$', '\xD1', '\x3', '\x2', '\x2', '\x2', '&', '\xD9', '\x3', 
		'\x2', '\x2', '\x2', '(', '\xE1', '\x3', '\x2', '\x2', '\x2', '*', '\xEC', 
		'\x3', '\x2', '\x2', '\x2', ',', '\xEE', '\x3', '\x2', '\x2', '\x2', '.', 
		'\x107', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\x5', '\x4', '\x3', 
		'\x2', '\x31', '\x32', '\a', '\x3', '\x2', '\x2', '\x32', '\x34', '\x3', 
		'\x2', '\x2', '\x2', '\x33', '\x30', '\x3', '\x2', '\x2', '\x2', '\x34', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x35', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\x36', '\x3', '\x2', '\x2', '\x2', '\x36', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\x37', '\x38', '\a', '\x4', '\x2', '\x2', '\x38', 
		'\x39', '\x5', '\x6', '\x4', '\x2', '\x39', ':', '\a', '/', '\x2', '\x2', 
		':', ';', '\a', '\x5', '\x2', '\x2', ';', '<', '\x5', '\b', '\x5', '\x2', 
		'<', '=', '\a', '\x6', '\x2', '\x2', '=', '>', '\x5', '\n', '\x6', '\x2', 
		'>', '?', '\a', '\a', '\x2', '\x2', '?', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x41', '\t', '\x2', '\x2', '\x2', '\x41', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\x42', 'O', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\x5', 
		'\x6', '\x4', '\x2', '\x44', 'K', '\a', '/', '\x2', '\x2', '\x45', '\x46', 
		'\a', '\xF', '\x2', '\x2', '\x46', 'G', '\x5', '\x6', '\x4', '\x2', 'G', 
		'H', '\a', '/', '\x2', '\x2', 'H', 'J', '\x3', '\x2', '\x2', '\x2', 'I', 
		'\x45', '\x3', '\x2', '\x2', '\x2', 'J', 'M', '\x3', '\x2', '\x2', '\x2', 
		'K', 'I', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\x3', '\x2', '\x2', '\x2', 
		'L', 'O', '\x3', '\x2', '\x2', '\x2', 'M', 'K', '\x3', '\x2', '\x2', '\x2', 
		'N', '\x42', '\x3', '\x2', '\x2', '\x2', 'N', '\x43', '\x3', '\x2', '\x2', 
		'\x2', 'O', '\t', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\x5', '\x1C', 
		'\xF', '\x2', 'Q', 'R', '\a', '\x3', '\x2', '\x2', 'R', 'T', '\x3', '\x2', 
		'\x2', '\x2', 'S', 'P', '\x3', '\x2', '\x2', '\x2', 'T', 'W', '\x3', '\x2', 
		'\x2', '\x2', 'U', 'S', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\x3', '\x2', 
		'\x2', '\x2', 'V', 'X', '\x3', '\x2', '\x2', '\x2', 'W', 'U', '\x3', '\x2', 
		'\x2', '\x2', 'X', 'Y', '\a', '\x10', '\x2', '\x2', 'Y', 'Z', '\x5', ' ', 
		'\x11', '\x2', 'Z', '[', '\a', '\x3', '\x2', '\x2', '[', '\\', '\a', '\x11', 
		'\x2', '\x2', '\\', '\v', '\x3', '\x2', '\x2', '\x2', ']', '^', '\x5', 
		' ', '\x11', '\x2', '^', '_', '\a', '\xF', '\x2', '\x2', '_', '\x61', 
		'\x3', '\x2', '\x2', '\x2', '`', ']', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'\x64', '\x3', '\x2', '\x2', '\x2', '\x62', '`', '\x3', '\x2', '\x2', 
		'\x2', '\x62', '\x63', '\x3', '\x2', '\x2', '\x2', '\x63', '\x65', '\x3', 
		'\x2', '\x2', '\x2', '\x64', '\x62', '\x3', '\x2', '\x2', '\x2', '\x65', 
		'h', '\x5', ' ', '\x11', '\x2', '\x66', 'h', '\x3', '\x2', '\x2', '\x2', 
		'g', '\x62', '\x3', '\x2', '\x2', '\x2', 'g', '\x66', '\x3', '\x2', '\x2', 
		'\x2', 'h', '\r', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\x5', '\x6', 
		'\x4', '\x2', 'j', 'k', '\a', '/', '\x2', '\x2', 'k', 'l', '\a', '\x12', 
		'\x2', '\x2', 'l', 'm', '\x5', ' ', '\x11', '\x2', 'm', '\xF', '\x3', 
		'\x2', '\x2', '\x2', 'n', 'o', '\a', '/', '\x2', '\x2', 'o', 'p', '\a', 
		'\x12', '\x2', '\x2', 'p', 'q', '\x5', ' ', '\x11', '\x2', 'q', '\x11', 
		'\x3', '\x2', '\x2', '\x2', 'r', 's', '\a', '/', '\x2', '\x2', 's', 't', 
		'\a', '\x5', '\x2', '\x2', 't', 'u', '\x5', '\f', '\a', '\x2', 'u', 'v', 
		'\a', '\x6', '\x2', '\x2', 'v', '\x13', '\x3', '\x2', '\x2', '\x2', 'w', 
		'x', '\a', '\x13', '\x2', '\x2', 'x', 'y', '\x5', '\x1E', '\x10', '\x2', 
		'y', '}', '\a', '\x14', '\x2', '\x2', 'z', '|', '\x5', '\x1C', '\xF', 
		'\x2', '{', 'z', '\x3', '\x2', '\x2', '\x2', '|', '\x7F', '\x3', '\x2', 
		'\x2', '\x2', '}', '{', '\x3', '\x2', '\x2', '\x2', '}', '~', '\x3', '\x2', 
		'\x2', '\x2', '~', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x7F', '}', '\x3', 
		'\x2', '\x2', '\x2', '\x80', '\x81', '\a', '\x15', '\x2', '\x2', '\x81', 
		'\x82', '\x5', '\x1E', '\x10', '\x2', '\x82', '\x86', '\a', '\x14', '\x2', 
		'\x2', '\x83', '\x85', '\x5', '\x1C', '\xF', '\x2', '\x84', '\x83', '\x3', 
		'\x2', '\x2', '\x2', '\x85', '\x88', '\x3', '\x2', '\x2', '\x2', '\x86', 
		'\x84', '\x3', '\x2', '\x2', '\x2', '\x86', '\x87', '\x3', '\x2', '\x2', 
		'\x2', '\x87', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x88', '\x86', '\x3', 
		'\x2', '\x2', '\x2', '\x89', '\x80', '\x3', '\x2', '\x2', '\x2', '\x8A', 
		'\x8D', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x89', '\x3', '\x2', '\x2', 
		'\x2', '\x8B', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x95', '\x3', 
		'\x2', '\x2', '\x2', '\x8D', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8E', 
		'\x92', '\a', '\x16', '\x2', '\x2', '\x8F', '\x91', '\x5', '\x1C', '\xF', 
		'\x2', '\x90', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x91', '\x94', '\x3', 
		'\x2', '\x2', '\x2', '\x92', '\x90', '\x3', '\x2', '\x2', '\x2', '\x92', 
		'\x93', '\x3', '\x2', '\x2', '\x2', '\x93', '\x96', '\x3', '\x2', '\x2', 
		'\x2', '\x94', '\x92', '\x3', '\x2', '\x2', '\x2', '\x95', '\x8E', '\x3', 
		'\x2', '\x2', '\x2', '\x95', '\x96', '\x3', '\x2', '\x2', '\x2', '\x96', 
		'\x97', '\x3', '\x2', '\x2', '\x2', '\x97', '\x98', '\a', '\a', '\x2', 
		'\x2', '\x98', '\x15', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', '\a', 
		'\x17', '\x2', '\x2', '\x9A', '\x9B', '\x5', '\x1E', '\x10', '\x2', '\x9B', 
		'\x9F', '\a', '\x18', '\x2', '\x2', '\x9C', '\x9E', '\x5', '\x1C', '\xF', 
		'\x2', '\x9D', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9E', '\xA1', '\x3', 
		'\x2', '\x2', '\x2', '\x9F', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x9F', 
		'\xA0', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA2', '\x3', '\x2', '\x2', 
		'\x2', '\xA1', '\x9F', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', '\a', 
		'\a', '\x2', '\x2', '\xA3', '\x17', '\x3', '\x2', '\x2', '\x2', '\xA4', 
		'\xAA', '\a', '\x18', '\x2', '\x2', '\xA5', '\xA6', '\x5', '\x1C', '\xF', 
		'\x2', '\xA6', '\xA7', '\a', '\x3', '\x2', '\x2', '\xA7', '\xA9', '\x3', 
		'\x2', '\x2', '\x2', '\xA8', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA9', 
		'\xAC', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xA8', '\x3', '\x2', '\x2', 
		'\x2', '\xAA', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAD', '\x3', 
		'\x2', '\x2', '\x2', '\xAC', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xAD', 
		'\xAE', '\a', '\x17', '\x2', '\x2', '\xAE', '\xAF', '\x5', '\x1E', '\x10', 
		'\x2', '\xAF', '\x19', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB1', '\a', 
		'\x19', '\x2', '\x2', '\xB1', '\xB2', '\x5', '\x1E', '\x10', '\x2', '\xB2', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xBB', '\x5', '\xE', '\b', 
		'\x2', '\xB4', '\xBB', '\x5', '\x10', '\t', '\x2', '\xB5', '\xBB', '\x5', 
		'\x12', '\n', '\x2', '\xB6', '\xBB', '\x5', '\x14', '\v', '\x2', '\xB7', 
		'\xBB', '\x5', '\x16', '\f', '\x2', '\xB8', '\xBB', '\x5', '\x18', '\r', 
		'\x2', '\xB9', '\xBB', '\x5', '\x1A', '\xE', '\x2', '\xBA', '\xB3', '\x3', 
		'\x2', '\x2', '\x2', '\xBA', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xBA', 
		'\xB5', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xB6', '\x3', '\x2', '\x2', 
		'\x2', '\xBA', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xB8', '\x3', 
		'\x2', '\x2', '\x2', '\xBA', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xBB', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBF', '\x5', ' ', '\x11', 
		'\x2', '\xBD', '\xBE', '\t', '\x3', '\x2', '\x2', '\xBE', '\xC0', '\x5', 
		' ', '\x11', '\x2', '\xBF', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xBF', 
		'\xC0', '\x3', '\x2', '\x2', '\x2', '\xC0', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\xC1', '\xC6', '\x5', '\"', '\x12', '\x2', '\xC2', '\xC3', '\t', 
		'\x4', '\x2', '\x2', '\xC3', '\xC5', '\x5', '\"', '\x12', '\x2', '\xC4', 
		'\xC2', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC8', '\x3', '\x2', '\x2', 
		'\x2', '\xC6', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC7', '\x3', 
		'\x2', '\x2', '\x2', '\xC7', '!', '\x3', '\x2', '\x2', '\x2', '\xC8', 
		'\xC6', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCE', '\x5', '$', '\x13', 
		'\x2', '\xCA', '\xCB', '\a', '\"', '\x2', '\x2', '\xCB', '\xCD', '\x5', 
		'$', '\x13', '\x2', '\xCC', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xCD', 
		'\xD0', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCC', '\x3', '\x2', '\x2', 
		'\x2', '\xCE', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xCF', '#', '\x3', 
		'\x2', '\x2', '\x2', '\xD0', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xD1', 
		'\xD6', '\x5', '&', '\x14', '\x2', '\xD2', '\xD3', '\a', '\"', '\x2', 
		'\x2', '\xD3', '\xD5', '\x5', '&', '\x14', '\x2', '\xD4', '\xD2', '\x3', 
		'\x2', '\x2', '\x2', '\xD5', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xD6', 
		'\xD4', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD7', '\x3', '\x2', '\x2', 
		'\x2', '\xD7', '%', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD6', '\x3', 
		'\x2', '\x2', '\x2', '\xD9', '\xDE', '\x5', '(', '\x15', '\x2', '\xDA', 
		'\xDB', '\t', '\x5', '\x2', '\x2', '\xDB', '\xDD', '\x5', '(', '\x15', 
		'\x2', '\xDC', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xE0', '\x3', 
		'\x2', '\x2', '\x2', '\xDE', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDE', 
		'\xDF', '\x3', '\x2', '\x2', '\x2', '\xDF', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\xE0', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE6', '\x5', 
		'*', '\x16', '\x2', '\xE2', '\xE3', '\t', '\x6', '\x2', '\x2', '\xE3', 
		'\xE5', '\x5', '*', '\x16', '\x2', '\xE4', '\xE2', '\x3', '\x2', '\x2', 
		'\x2', '\xE5', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE4', '\x3', 
		'\x2', '\x2', '\x2', '\xE6', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xE7', 
		')', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE6', '\x3', '\x2', '\x2', 
		'\x2', '\xE9', '\xED', '\x5', ',', '\x17', '\x2', '\xEA', '\xEB', '\a', 
		'$', '\x2', '\x2', '\xEB', '\xED', '\x5', '*', '\x16', '\x2', '\xEC', 
		'\xE9', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xEA', '\x3', '\x2', '\x2', 
		'\x2', '\xED', '+', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xF1', '\x5', 
		'.', '\x18', '\x2', '\xEF', '\xF0', '\a', '(', '\x2', '\x2', '\xF0', '\xF2', 
		'\x5', '*', '\x16', '\x2', '\xF1', '\xEF', '\x3', '\x2', '\x2', '\x2', 
		'\xF1', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xF2', '-', '\x3', '\x2', 
		'\x2', '\x2', '\xF3', '\xF4', '\a', '/', '\x2', '\x2', '\xF4', '\xF5', 
		'\a', ')', '\x2', '\x2', '\xF5', '\xF6', '\x5', ' ', '\x11', '\x2', '\xF6', 
		'\xF7', '\a', '*', '\x2', '\x2', '\xF7', '\x108', '\x3', '\x2', '\x2', 
		'\x2', '\xF8', '\xF9', '\a', '/', '\x2', '\x2', '\xF9', '\xFA', '\a', 
		')', '\x2', '\x2', '\xFA', '\xFB', '\x5', ' ', '\x11', '\x2', '\xFB', 
		'\xFC', '\a', '*', '\x2', '\x2', '\xFC', '\x108', '\x3', '\x2', '\x2', 
		'\x2', '\xFD', '\xFE', '\a', '+', '\x2', '\x2', '\xFE', '\xFF', '\x5', 
		'\x6', '\x4', '\x2', '\xFF', '\x100', '\a', ')', '\x2', '\x2', '\x100', 
		'\x101', '\x5', ' ', '\x11', '\x2', '\x101', '\x102', '\a', '*', '\x2', 
		'\x2', '\x102', '\x108', '\x3', '\x2', '\x2', '\x2', '\x103', '\x108', 
		'\a', '/', '\x2', '\x2', '\x104', '\x108', '\a', ',', '\x2', '\x2', '\x105', 
		'\x108', '\a', '-', '\x2', '\x2', '\x106', '\x108', '\a', '.', '\x2', 
		'\x2', '\x107', '\xF3', '\x3', '\x2', '\x2', '\x2', '\x107', '\xF8', '\x3', 
		'\x2', '\x2', '\x2', '\x107', '\xFD', '\x3', '\x2', '\x2', '\x2', '\x107', 
		'\x103', '\x3', '\x2', '\x2', '\x2', '\x107', '\x104', '\x3', '\x2', '\x2', 
		'\x2', '\x107', '\x105', '\x3', '\x2', '\x2', '\x2', '\x107', '\x106', 
		'\x3', '\x2', '\x2', '\x2', '\x108', '/', '\x3', '\x2', '\x2', '\x2', 
		'\x19', '\x35', 'K', 'N', 'U', '\x62', 'g', '}', '\x86', '\x8B', '\x92', 
		'\x95', '\x9F', '\xAA', '\xBA', '\xBF', '\xC6', '\xCE', '\xD6', '\xDE', 
		'\xE6', '\xEC', '\xF1', '\x107',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
