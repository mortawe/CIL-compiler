//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from L1.g4 by ANTLR 4.9

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9")]
[System.CLSCompliant(false)]
public partial class L1Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, BASE_TYPE=21, NUMBER=22, CHAR=23, STRING=24, 
		BOOLEAN=25, COMPARE=26, ARITH=27, MULT=28, OR=29, NEW=30, ARRAY=31, IDENT=32, 
		WHITESPACE=33;
	public const int
		RULE_program = 0, RULE_function = 1, RULE_type = 2, RULE_var_list = 3, 
		RULE_function_body = 4, RULE_fact_params = 5, RULE_op_return = 6, RULE_op_definition = 7, 
		RULE_op_assign = 8, RULE_op_func_call = 9, RULE_op_if = 10, RULE_op_while_pre = 11, 
		RULE_op_while_post = 12, RULE_op_assert = 13, RULE_stmt = 14, RULE_expr = 15, 
		RULE_and_expr = 16, RULE_comp = 17, RULE_arith_expr = 18, RULE_term = 19, 
		RULE_factor = 20, RULE_power = 21, RULE_atom_expr = 22, RULE_array_elem = 23;
	public static readonly string[] ruleNames = {
		"program", "function", "type", "var_list", "function_body", "fact_params", 
		"op_return", "op_definition", "op_assign", "op_func_call", "op_if", "op_while_pre", 
		"op_while_post", "op_assert", "stmt", "expr", "and_expr", "comp", "arith_expr", 
		"term", "factor", "power", "atom_expr", "array_elem"
	};

	private static readonly string[] _LiteralNames = {
		null, "'define'", "'('", "')'", "'end'", "','", "';'", "'return'", "':='", 
		"'if'", "'then'", "'elseif'", "'else'", "'while'", "'do'", "'assert'", 
		"'and'", "'-'", "'**'", "'['", "']'", null, null, null, null, null, null, 
		null, null, null, "'new'", "'array'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "BASE_TYPE", "NUMBER", 
		"CHAR", "STRING", "BOOLEAN", "COMPARE", "ARITH", "MULT", "OR", "NEW", 
		"ARRAY", "IDENT", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "L1.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static L1Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public L1Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public L1Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 48; function();
				}
				}
				State = 51;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(L1Parser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Var_listContext var_list() {
			return GetRuleContext<Var_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_bodyContext function_body() {
			return GetRuleContext<Function_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 2, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53; Match(T__0);
			State = 55;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASE_TYPE) {
				{
				State = 54; type();
				}
			}

			State = 57; Match(IDENT);
			State = 58; Match(T__1);
			State = 59; var_list();
			State = 60; Match(T__2);
			State = 61; function_body();
			State = 62; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BASE_TYPE() { return GetToken(L1Parser.BASE_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ARRAY() { return GetTokens(L1Parser.ARRAY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY(int i) {
			return GetToken(L1Parser.ARRAY, i);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.ExitType(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 4, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64; Match(BASE_TYPE);
			State = 68;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ARRAY) {
				{
				{
				State = 65; Match(ARRAY);
				}
				}
				State = 70;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENT() { return GetTokens(L1Parser.IDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT(int i) {
			return GetToken(L1Parser.IDENT, i);
		}
		public Var_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.EnterVar_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.ExitVar_list(this);
		}
	}

	[RuleVersion(0)]
	public Var_listContext var_list() {
		Var_listContext _localctx = new Var_listContext(Context, State);
		EnterRule(_localctx, 6, RULE_var_list);
		int _la;
		try {
			State = 83;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case BASE_TYPE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 72; type();
				State = 73; Match(IDENT);
				State = 80;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 74; Match(T__4);
					State = 75; type();
					State = 76; Match(IDENT);
					}
					}
					State = 82;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public Function_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.EnterFunction_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.ExitFunction_body(this);
		}
	}

	[RuleVersion(0)]
	public Function_bodyContext function_body() {
		Function_bodyContext _localctx = new Function_bodyContext(Context, State);
		EnterRule(_localctx, 8, RULE_function_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__8) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << BASE_TYPE) | (1L << IDENT))) != 0)) {
				{
				{
				State = 85; stmt();
				State = 86; Match(T__5);
				}
				}
				State = 92;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fact_paramsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Fact_paramsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fact_params; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.EnterFact_params(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.ExitFact_params(this);
		}
	}

	[RuleVersion(0)]
	public Fact_paramsContext fact_params() {
		Fact_paramsContext _localctx = new Fact_paramsContext(Context, State);
		EnterRule(_localctx, 10, RULE_fact_params);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__16:
			case NUMBER:
			case CHAR:
			case STRING:
			case BOOLEAN:
			case NEW:
			case IDENT:
				{
				State = 98;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 93; expr();
						State = 94; Match(T__4);
						}
						} 
					}
					State = 100;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
				}
				State = 101; expr();
				}
				break;
			case T__2:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_returnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Op_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_return; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.EnterOp_return(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.ExitOp_return(this);
		}
	}

	[RuleVersion(0)]
	public Op_returnContext op_return() {
		Op_returnContext _localctx = new Op_returnContext(Context, State);
		EnterRule(_localctx, 12, RULE_op_return);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105; Match(T__6);
			State = 108;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 106; expr();
				}
				break;
			case 2:
				{
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(L1Parser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Op_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.EnterOp_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.ExitOp_definition(this);
		}
	}

	[RuleVersion(0)]
	public Op_definitionContext op_definition() {
		Op_definitionContext _localctx = new Op_definitionContext(Context, State);
		EnterRule(_localctx, 14, RULE_op_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110; type();
			State = 111; Match(IDENT);
			State = 114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__7) {
				{
				State = 112; Match(T__7);
				State = 113; expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_assignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(L1Parser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Array_elemContext array_elem() {
			return GetRuleContext<Array_elemContext>(0);
		}
		public Op_assignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_assign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.EnterOp_assign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.ExitOp_assign(this);
		}
	}

	[RuleVersion(0)]
	public Op_assignContext op_assign() {
		Op_assignContext _localctx = new Op_assignContext(Context, State);
		EnterRule(_localctx, 16, RULE_op_assign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 116; Match(IDENT);
				}
				break;
			case 2:
				{
				State = 117; array_elem();
				}
				break;
			}
			State = 120; Match(T__7);
			State = 121; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_func_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(L1Parser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Fact_paramsContext fact_params() {
			return GetRuleContext<Fact_paramsContext>(0);
		}
		public Op_func_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_func_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.EnterOp_func_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.ExitOp_func_call(this);
		}
	}

	[RuleVersion(0)]
	public Op_func_callContext op_func_call() {
		Op_func_callContext _localctx = new Op_func_callContext(Context, State);
		EnterRule(_localctx, 18, RULE_op_func_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123; Match(IDENT);
			State = 124; Match(T__1);
			State = 125; fact_params();
			State = 126; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_ifContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public Op_ifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.EnterOp_if(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.ExitOp_if(this);
		}
	}

	[RuleVersion(0)]
	public Op_ifContext op_if() {
		Op_ifContext _localctx = new Op_ifContext(Context, State);
		EnterRule(_localctx, 20, RULE_op_if);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128; Match(T__8);
			State = 129; expr();
			State = 130; Match(T__9);
			State = 134;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__8) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << BASE_TYPE) | (1L << IDENT))) != 0)) {
				{
				{
				State = 131; stmt();
				}
				}
				State = 136;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 148;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__10) {
				{
				{
				State = 137; Match(T__10);
				State = 138; expr();
				State = 139; Match(T__9);
				State = 143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__8) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << BASE_TYPE) | (1L << IDENT))) != 0)) {
					{
					{
					State = 140; stmt();
					}
					}
					State = 145;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 150;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 151; Match(T__11);
				State = 155;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__8) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << BASE_TYPE) | (1L << IDENT))) != 0)) {
					{
					{
					State = 152; stmt();
					}
					}
					State = 157;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 160; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_while_preContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public Op_while_preContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_while_pre; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.EnterOp_while_pre(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.ExitOp_while_pre(this);
		}
	}

	[RuleVersion(0)]
	public Op_while_preContext op_while_pre() {
		Op_while_preContext _localctx = new Op_while_preContext(Context, State);
		EnterRule(_localctx, 22, RULE_op_while_pre);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162; Match(T__12);
			State = 163; expr();
			State = 164; Match(T__13);
			State = 168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__8) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << BASE_TYPE) | (1L << IDENT))) != 0)) {
				{
				{
				State = 165; stmt();
				}
				}
				State = 170;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 171; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_while_postContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public Op_while_postContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_while_post; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.EnterOp_while_post(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.ExitOp_while_post(this);
		}
	}

	[RuleVersion(0)]
	public Op_while_postContext op_while_post() {
		Op_while_postContext _localctx = new Op_while_postContext(Context, State);
		EnterRule(_localctx, 24, RULE_op_while_post);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 173; Match(T__13);
			State = 179;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 174; stmt();
					State = 175; Match(T__5);
					}
					} 
				}
				State = 181;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			State = 182; Match(T__12);
			State = 183; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_assertContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Op_assertContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_assert; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.EnterOp_assert(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.ExitOp_assert(this);
		}
	}

	[RuleVersion(0)]
	public Op_assertContext op_assert() {
		Op_assertContext _localctx = new Op_assertContext(Context, State);
		EnterRule(_localctx, 26, RULE_op_assert);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185; Match(T__14);
			State = 186; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Op_definitionContext op_definition() {
			return GetRuleContext<Op_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_assignContext op_assign() {
			return GetRuleContext<Op_assignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_func_callContext op_func_call() {
			return GetRuleContext<Op_func_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_ifContext op_if() {
			return GetRuleContext<Op_ifContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_while_preContext op_while_pre() {
			return GetRuleContext<Op_while_preContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_while_postContext op_while_post() {
			return GetRuleContext<Op_while_postContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_assertContext op_assert() {
			return GetRuleContext<Op_assertContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_returnContext op_return() {
			return GetRuleContext<Op_returnContext>(0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.EnterStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.ExitStmt(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 28, RULE_stmt);
		try {
			State = 196;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 188; op_definition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 189; op_assign();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 190; op_func_call();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 191; op_if();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 192; op_while_pre();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 193; op_while_post();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 194; op_assert();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 195; op_return();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public And_exprContext[] and_expr() {
			return GetRuleContexts<And_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public And_exprContext and_expr(int i) {
			return GetRuleContext<And_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(L1Parser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(L1Parser.OR, i);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 30, RULE_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198; and_expr();
			State = 203;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 199; Match(OR);
				State = 200; and_expr();
				}
				}
				State = 205;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class And_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompContext[] comp() {
			return GetRuleContexts<CompContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompContext comp(int i) {
			return GetRuleContext<CompContext>(i);
		}
		public And_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.EnterAnd_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.ExitAnd_expr(this);
		}
	}

	[RuleVersion(0)]
	public And_exprContext and_expr() {
		And_exprContext _localctx = new And_exprContext(Context, State);
		EnterRule(_localctx, 32, RULE_and_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206; comp();
			State = 211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__15) {
				{
				{
				State = 207; Match(T__15);
				State = 208; comp();
				}
				}
				State = 213;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Arith_exprContext[] arith_expr() {
			return GetRuleContexts<Arith_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arith_exprContext arith_expr(int i) {
			return GetRuleContext<Arith_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMPARE() { return GetTokens(L1Parser.COMPARE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPARE(int i) {
			return GetToken(L1Parser.COMPARE, i);
		}
		public CompContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.EnterComp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.ExitComp(this);
		}
	}

	[RuleVersion(0)]
	public CompContext comp() {
		CompContext _localctx = new CompContext(Context, State);
		EnterRule(_localctx, 34, RULE_comp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214; arith_expr();
			State = 219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMPARE) {
				{
				{
				State = 215; Match(COMPARE);
				State = 216; arith_expr();
				}
				}
				State = 221;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arith_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ARITH() { return GetTokens(L1Parser.ARITH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARITH(int i) {
			return GetToken(L1Parser.ARITH, i);
		}
		public Arith_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arith_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.EnterArith_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.ExitArith_expr(this);
		}
	}

	[RuleVersion(0)]
	public Arith_exprContext arith_expr() {
		Arith_exprContext _localctx = new Arith_exprContext(Context, State);
		EnterRule(_localctx, 36, RULE_arith_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222; term();
			State = 227;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ARITH) {
				{
				{
				State = 223; Match(ARITH);
				State = 224; term();
				}
				}
				State = 229;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULT() { return GetTokens(L1Parser.MULT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT(int i) {
			return GetToken(L1Parser.MULT, i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 38, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230; factor();
			State = 235;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULT) {
				{
				{
				State = 231; Match(MULT);
				State = 232; factor();
				}
				}
				State = 237;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PowerContext power() {
			return GetRuleContext<PowerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 40, RULE_factor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
			case CHAR:
			case STRING:
			case BOOLEAN:
			case NEW:
			case IDENT:
				{
				State = 238; power();
				}
				break;
			case T__16:
				{
				State = 239; Match(T__16);
				State = 240; factor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PowerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Atom_exprContext atom_expr() {
			return GetRuleContext<Atom_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		public PowerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_power; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.EnterPower(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.ExitPower(this);
		}
	}

	[RuleVersion(0)]
	public PowerContext power() {
		PowerContext _localctx = new PowerContext(Context, State);
		EnterRule(_localctx, 42, RULE_power);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 243; atom_expr();
			State = 248;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 244; Match(T__17);
					State = 245; factor();
					}
					} 
				}
				State = 250;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Atom_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(L1Parser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Array_elemContext array_elem() {
			return GetRuleContext<Array_elemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(L1Parser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(L1Parser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(L1Parser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(L1Parser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(L1Parser.STRING, 0); }
		public Atom_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.EnterAtom_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.ExitAtom_expr(this);
		}
	}

	[RuleVersion(0)]
	public Atom_exprContext atom_expr() {
		Atom_exprContext _localctx = new Atom_exprContext(Context, State);
		EnterRule(_localctx, 44, RULE_atom_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				State = 251; Match(IDENT);
				}
				break;
			case 2:
				{
				State = 252; array_elem();
				}
				break;
			case 3:
				{
				State = 253; Match(NEW);
				State = 254; type();
				State = 255; Match(T__18);
				State = 256; expr();
				State = 257; Match(T__19);
				}
				break;
			case 4:
				{
				State = 259; Match(IDENT);
				}
				break;
			case 5:
				{
				State = 260; Match(NUMBER);
				}
				break;
			case 6:
				{
				State = 261; Match(BOOLEAN);
				}
				break;
			case 7:
				{
				State = 262; Match(CHAR);
				}
				break;
			case 8:
				{
				State = 263; Match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(L1Parser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Array_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.EnterArray_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IL1Listener typedListener = listener as IL1Listener;
			if (typedListener != null) typedListener.ExitArray_elem(this);
		}
	}

	[RuleVersion(0)]
	public Array_elemContext array_elem() {
		Array_elemContext _localctx = new Array_elemContext(Context, State);
		EnterRule(_localctx, 46, RULE_array_elem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 266; Match(IDENT);
			State = 271;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 267; Match(T__18);
				State = 268; expr();
				State = 269; Match(T__19);
				}
				}
				State = 273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__18 );
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '#', '\x116', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x3', '\x2', '\x6', '\x2', '\x34', 
		'\n', '\x2', '\r', '\x2', '\xE', '\x2', '\x35', '\x3', '\x3', '\x3', '\x3', 
		'\x5', '\x3', ':', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\a', '\x4', '\x45', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 
		'H', '\v', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', 'Q', '\n', '\x5', 
		'\f', '\x5', '\xE', '\x5', 'T', '\v', '\x5', '\x5', '\x5', 'V', '\n', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '[', '\n', 
		'\x6', '\f', '\x6', '\xE', '\x6', '^', '\v', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\a', '\a', '\x63', '\n', '\a', '\f', '\a', '\xE', 
		'\a', '\x66', '\v', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'j', 
		'\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 'o', '\n', 
		'\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 
		'u', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x5', '\n', 'y', '\n', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\a', '\f', '\x87', '\n', '\f', '\f', '\f', '\xE', '\f', 
		'\x8A', '\v', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\a', '\f', '\x90', '\n', '\f', '\f', '\f', '\xE', '\f', '\x93', '\v', 
		'\f', '\a', '\f', '\x95', '\n', '\f', '\f', '\f', '\xE', '\f', '\x98', 
		'\v', '\f', '\x3', '\f', '\x3', '\f', '\a', '\f', '\x9C', '\n', '\f', 
		'\f', '\f', '\xE', '\f', '\x9F', '\v', '\f', '\x5', '\f', '\xA1', '\n', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\a', '\r', '\xA9', '\n', '\r', '\f', '\r', '\xE', '\r', 
		'\xAC', '\v', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\xB4', '\n', '\xE', '\f', '\xE', 
		'\xE', '\xE', '\xB7', '\v', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x5', '\x10', '\xC7', '\n', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\a', '\x11', '\xCC', '\n', '\x11', '\f', 
		'\x11', '\xE', '\x11', '\xCF', '\v', '\x11', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\a', '\x12', '\xD4', '\n', '\x12', '\f', '\x12', '\xE', 
		'\x12', '\xD7', '\v', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\a', '\x13', '\xDC', '\n', '\x13', '\f', '\x13', '\xE', '\x13', '\xDF', 
		'\v', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\a', '\x14', 
		'\xE4', '\n', '\x14', '\f', '\x14', '\xE', '\x14', '\xE7', '\v', '\x14', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\a', '\x15', '\xEC', '\n', 
		'\x15', '\f', '\x15', '\xE', '\x15', '\xEF', '\v', '\x15', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\xF4', '\n', '\x16', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\a', '\x17', '\xF9', '\n', '\x17', 
		'\f', '\x17', '\xE', '\x17', '\xFC', '\v', '\x17', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x5', '\x18', '\x10B', '\n', '\x18', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x6', '\x19', 
		'\x112', '\n', '\x19', '\r', '\x19', '\xE', '\x19', '\x113', '\x3', '\x19', 
		'\x2', '\x2', '\x1A', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', 
		'&', '(', '*', ',', '.', '\x30', '\x2', '\x2', '\x2', '\x125', '\x2', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x4', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\x42', '\x3', '\x2', '\x2', '\x2', '\b', 'U', '\x3', '\x2', 
		'\x2', '\x2', '\n', '\\', '\x3', '\x2', '\x2', '\x2', '\f', 'i', '\x3', 
		'\x2', '\x2', '\x2', '\xE', 'k', '\x3', '\x2', '\x2', '\x2', '\x10', 'p', 
		'\x3', '\x2', '\x2', '\x2', '\x12', 'x', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'}', '\x3', '\x2', '\x2', '\x2', '\x16', '\x82', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\xA4', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xAF', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\xBB', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\xC6', '\x3', '\x2', '\x2', '\x2', ' ', '\xC8', '\x3', '\x2', '\x2', 
		'\x2', '\"', '\xD0', '\x3', '\x2', '\x2', '\x2', '$', '\xD8', '\x3', '\x2', 
		'\x2', '\x2', '&', '\xE0', '\x3', '\x2', '\x2', '\x2', '(', '\xE8', '\x3', 
		'\x2', '\x2', '\x2', '*', '\xF3', '\x3', '\x2', '\x2', '\x2', ',', '\xF5', 
		'\x3', '\x2', '\x2', '\x2', '.', '\x10A', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x32', '\x34', '\x5', '\x4', 
		'\x3', '\x2', '\x33', '\x32', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x35', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\x35', '\x36', '\x3', '\x2', '\x2', '\x2', '\x36', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\x37', '\x39', '\a', '\x3', '\x2', '\x2', '\x38', ':', 
		'\x5', '\x6', '\x4', '\x2', '\x39', '\x38', '\x3', '\x2', '\x2', '\x2', 
		'\x39', ':', '\x3', '\x2', '\x2', '\x2', ':', ';', '\x3', '\x2', '\x2', 
		'\x2', ';', '<', '\a', '\"', '\x2', '\x2', '<', '=', '\a', '\x4', '\x2', 
		'\x2', '=', '>', '\x5', '\b', '\x5', '\x2', '>', '?', '\a', '\x5', '\x2', 
		'\x2', '?', '@', '\x5', '\n', '\x6', '\x2', '@', '\x41', '\a', '\x6', 
		'\x2', '\x2', '\x41', '\x5', '\x3', '\x2', '\x2', '\x2', '\x42', '\x46', 
		'\a', '\x17', '\x2', '\x2', '\x43', '\x45', '\a', '!', '\x2', '\x2', '\x44', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x45', 'H', '\x3', '\x2', '\x2', 
		'\x2', '\x46', '\x44', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\x3', 
		'\x2', '\x2', '\x2', 'G', '\a', '\x3', '\x2', '\x2', '\x2', 'H', '\x46', 
		'\x3', '\x2', '\x2', '\x2', 'I', 'V', '\x3', '\x2', '\x2', '\x2', 'J', 
		'K', '\x5', '\x6', '\x4', '\x2', 'K', 'R', '\a', '\"', '\x2', '\x2', 'L', 
		'M', '\a', '\a', '\x2', '\x2', 'M', 'N', '\x5', '\x6', '\x4', '\x2', 'N', 
		'O', '\a', '\"', '\x2', '\x2', 'O', 'Q', '\x3', '\x2', '\x2', '\x2', 'P', 
		'L', '\x3', '\x2', '\x2', '\x2', 'Q', 'T', '\x3', '\x2', '\x2', '\x2', 
		'R', 'P', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\x3', '\x2', '\x2', '\x2', 
		'S', 'V', '\x3', '\x2', '\x2', '\x2', 'T', 'R', '\x3', '\x2', '\x2', '\x2', 
		'U', 'I', '\x3', '\x2', '\x2', '\x2', 'U', 'J', '\x3', '\x2', '\x2', '\x2', 
		'V', '\t', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\x5', '\x1E', '\x10', 
		'\x2', 'X', 'Y', '\a', '\b', '\x2', '\x2', 'Y', '[', '\x3', '\x2', '\x2', 
		'\x2', 'Z', 'W', '\x3', '\x2', '\x2', '\x2', '[', '^', '\x3', '\x2', '\x2', 
		'\x2', '\\', 'Z', '\x3', '\x2', '\x2', '\x2', '\\', ']', '\x3', '\x2', 
		'\x2', '\x2', ']', '\v', '\x3', '\x2', '\x2', '\x2', '^', '\\', '\x3', 
		'\x2', '\x2', '\x2', '_', '`', '\x5', ' ', '\x11', '\x2', '`', '\x61', 
		'\a', '\a', '\x2', '\x2', '\x61', '\x63', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '_', '\x3', '\x2', '\x2', '\x2', '\x63', '\x66', '\x3', '\x2', 
		'\x2', '\x2', '\x64', '\x62', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', 
		'\x3', '\x2', '\x2', '\x2', '\x65', 'g', '\x3', '\x2', '\x2', '\x2', '\x66', 
		'\x64', '\x3', '\x2', '\x2', '\x2', 'g', 'j', '\x5', ' ', '\x11', '\x2', 
		'h', 'j', '\x3', '\x2', '\x2', '\x2', 'i', '\x64', '\x3', '\x2', '\x2', 
		'\x2', 'i', 'h', '\x3', '\x2', '\x2', '\x2', 'j', '\r', '\x3', '\x2', 
		'\x2', '\x2', 'k', 'n', '\a', '\t', '\x2', '\x2', 'l', 'o', '\x5', ' ', 
		'\x11', '\x2', 'm', 'o', '\x3', '\x2', '\x2', '\x2', 'n', 'l', '\x3', 
		'\x2', '\x2', '\x2', 'n', 'm', '\x3', '\x2', '\x2', '\x2', 'o', '\xF', 
		'\x3', '\x2', '\x2', '\x2', 'p', 'q', '\x5', '\x6', '\x4', '\x2', 'q', 
		't', '\a', '\"', '\x2', '\x2', 'r', 's', '\a', '\n', '\x2', '\x2', 's', 
		'u', '\x5', ' ', '\x11', '\x2', 't', 'r', '\x3', '\x2', '\x2', '\x2', 
		't', 'u', '\x3', '\x2', '\x2', '\x2', 'u', '\x11', '\x3', '\x2', '\x2', 
		'\x2', 'v', 'y', '\a', '\"', '\x2', '\x2', 'w', 'y', '\x5', '\x30', '\x19', 
		'\x2', 'x', 'v', '\x3', '\x2', '\x2', '\x2', 'x', 'w', '\x3', '\x2', '\x2', 
		'\x2', 'y', 'z', '\x3', '\x2', '\x2', '\x2', 'z', '{', '\a', '\n', '\x2', 
		'\x2', '{', '|', '\x5', ' ', '\x11', '\x2', '|', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '}', '~', '\a', '\"', '\x2', '\x2', '~', '\x7F', '\a', '\x4', 
		'\x2', '\x2', '\x7F', '\x80', '\x5', '\f', '\a', '\x2', '\x80', '\x81', 
		'\a', '\x5', '\x2', '\x2', '\x81', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x82', '\x83', '\a', '\v', '\x2', '\x2', '\x83', '\x84', '\x5', ' ', 
		'\x11', '\x2', '\x84', '\x88', '\a', '\f', '\x2', '\x2', '\x85', '\x87', 
		'\x5', '\x1E', '\x10', '\x2', '\x86', '\x85', '\x3', '\x2', '\x2', '\x2', 
		'\x87', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x88', '\x86', '\x3', '\x2', 
		'\x2', '\x2', '\x88', '\x89', '\x3', '\x2', '\x2', '\x2', '\x89', '\x96', 
		'\x3', '\x2', '\x2', '\x2', '\x8A', '\x88', '\x3', '\x2', '\x2', '\x2', 
		'\x8B', '\x8C', '\a', '\r', '\x2', '\x2', '\x8C', '\x8D', '\x5', ' ', 
		'\x11', '\x2', '\x8D', '\x91', '\a', '\f', '\x2', '\x2', '\x8E', '\x90', 
		'\x5', '\x1E', '\x10', '\x2', '\x8F', '\x8E', '\x3', '\x2', '\x2', '\x2', 
		'\x90', '\x93', '\x3', '\x2', '\x2', '\x2', '\x91', '\x8F', '\x3', '\x2', 
		'\x2', '\x2', '\x91', '\x92', '\x3', '\x2', '\x2', '\x2', '\x92', '\x95', 
		'\x3', '\x2', '\x2', '\x2', '\x93', '\x91', '\x3', '\x2', '\x2', '\x2', 
		'\x94', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x95', '\x98', '\x3', '\x2', 
		'\x2', '\x2', '\x96', '\x94', '\x3', '\x2', '\x2', '\x2', '\x96', '\x97', 
		'\x3', '\x2', '\x2', '\x2', '\x97', '\xA0', '\x3', '\x2', '\x2', '\x2', 
		'\x98', '\x96', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9D', '\a', '\xE', 
		'\x2', '\x2', '\x9A', '\x9C', '\x5', '\x1E', '\x10', '\x2', '\x9B', '\x9A', 
		'\x3', '\x2', '\x2', '\x2', '\x9C', '\x9F', '\x3', '\x2', '\x2', '\x2', 
		'\x9D', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9E', '\x3', '\x2', 
		'\x2', '\x2', '\x9E', '\xA1', '\x3', '\x2', '\x2', '\x2', '\x9F', '\x9D', 
		'\x3', '\x2', '\x2', '\x2', '\xA0', '\x99', '\x3', '\x2', '\x2', '\x2', 
		'\xA0', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA2', '\x3', '\x2', 
		'\x2', '\x2', '\xA2', '\xA3', '\a', '\x6', '\x2', '\x2', '\xA3', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', '\a', '\xF', '\x2', '\x2', 
		'\xA5', '\xA6', '\x5', ' ', '\x11', '\x2', '\xA6', '\xAA', '\a', '\x10', 
		'\x2', '\x2', '\xA7', '\xA9', '\x5', '\x1E', '\x10', '\x2', '\xA8', '\xA7', 
		'\x3', '\x2', '\x2', '\x2', '\xA9', '\xAC', '\x3', '\x2', '\x2', '\x2', 
		'\xAA', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAB', '\x3', '\x2', 
		'\x2', '\x2', '\xAB', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAA', 
		'\x3', '\x2', '\x2', '\x2', '\xAD', '\xAE', '\a', '\x6', '\x2', '\x2', 
		'\xAE', '\x19', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB5', '\a', '\x10', 
		'\x2', '\x2', '\xB0', '\xB1', '\x5', '\x1E', '\x10', '\x2', '\xB1', '\xB2', 
		'\a', '\b', '\x2', '\x2', '\xB2', '\xB4', '\x3', '\x2', '\x2', '\x2', 
		'\xB3', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB7', '\x3', '\x2', 
		'\x2', '\x2', '\xB5', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB6', 
		'\x3', '\x2', '\x2', '\x2', '\xB6', '\xB8', '\x3', '\x2', '\x2', '\x2', 
		'\xB7', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB9', '\a', '\xF', 
		'\x2', '\x2', '\xB9', '\xBA', '\x5', ' ', '\x11', '\x2', '\xBA', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\xBB', '\xBC', '\a', '\x11', '\x2', '\x2', 
		'\xBC', '\xBD', '\x5', ' ', '\x11', '\x2', '\xBD', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\xBE', '\xC7', '\x5', '\x10', '\t', '\x2', '\xBF', '\xC7', 
		'\x5', '\x12', '\n', '\x2', '\xC0', '\xC7', '\x5', '\x14', '\v', '\x2', 
		'\xC1', '\xC7', '\x5', '\x16', '\f', '\x2', '\xC2', '\xC7', '\x5', '\x18', 
		'\r', '\x2', '\xC3', '\xC7', '\x5', '\x1A', '\xE', '\x2', '\xC4', '\xC7', 
		'\x5', '\x1C', '\xF', '\x2', '\xC5', '\xC7', '\x5', '\xE', '\b', '\x2', 
		'\xC6', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xBF', '\x3', '\x2', 
		'\x2', '\x2', '\xC6', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC1', 
		'\x3', '\x2', '\x2', '\x2', '\xC6', '\xC2', '\x3', '\x2', '\x2', '\x2', 
		'\xC6', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC4', '\x3', '\x2', 
		'\x2', '\x2', '\xC6', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC7', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\xC8', '\xCD', '\x5', '\"', '\x12', '\x2', 
		'\xC9', '\xCA', '\a', '\x1F', '\x2', '\x2', '\xCA', '\xCC', '\x5', '\"', 
		'\x12', '\x2', '\xCB', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCF', 
		'\x3', '\x2', '\x2', '\x2', '\xCD', '\xCB', '\x3', '\x2', '\x2', '\x2', 
		'\xCD', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xCE', '!', '\x3', '\x2', 
		'\x2', '\x2', '\xCF', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD5', 
		'\x5', '$', '\x13', '\x2', '\xD1', '\xD2', '\a', '\x12', '\x2', '\x2', 
		'\xD2', '\xD4', '\x5', '$', '\x13', '\x2', '\xD3', '\xD1', '\x3', '\x2', 
		'\x2', '\x2', '\xD4', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD3', 
		'\x3', '\x2', '\x2', '\x2', '\xD5', '\xD6', '\x3', '\x2', '\x2', '\x2', 
		'\xD6', '#', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD5', '\x3', '\x2', 
		'\x2', '\x2', '\xD8', '\xDD', '\x5', '&', '\x14', '\x2', '\xD9', '\xDA', 
		'\a', '\x1C', '\x2', '\x2', '\xDA', '\xDC', '\x5', '&', '\x14', '\x2', 
		'\xDB', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDF', '\x3', '\x2', 
		'\x2', '\x2', '\xDD', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDE', 
		'\x3', '\x2', '\x2', '\x2', '\xDE', '%', '\x3', '\x2', '\x2', '\x2', '\xDF', 
		'\xDD', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE5', '\x5', '(', '\x15', 
		'\x2', '\xE1', '\xE2', '\a', '\x1D', '\x2', '\x2', '\xE2', '\xE4', '\x5', 
		'(', '\x15', '\x2', '\xE3', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xE4', 
		'\xE7', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE3', '\x3', '\x2', '\x2', 
		'\x2', '\xE5', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE6', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\xE7', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE8', 
		'\xED', '\x5', '*', '\x16', '\x2', '\xE9', '\xEA', '\a', '\x1E', '\x2', 
		'\x2', '\xEA', '\xEC', '\x5', '*', '\x16', '\x2', '\xEB', '\xE9', '\x3', 
		'\x2', '\x2', '\x2', '\xEC', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xED', 
		'\xEB', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEE', '\x3', '\x2', '\x2', 
		'\x2', '\xEE', ')', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xED', '\x3', 
		'\x2', '\x2', '\x2', '\xF0', '\xF4', '\x5', ',', '\x17', '\x2', '\xF1', 
		'\xF2', '\a', '\x13', '\x2', '\x2', '\xF2', '\xF4', '\x5', '*', '\x16', 
		'\x2', '\xF3', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF1', '\x3', 
		'\x2', '\x2', '\x2', '\xF4', '+', '\x3', '\x2', '\x2', '\x2', '\xF5', 
		'\xFA', '\x5', '.', '\x18', '\x2', '\xF6', '\xF7', '\a', '\x14', '\x2', 
		'\x2', '\xF7', '\xF9', '\x5', '*', '\x16', '\x2', '\xF8', '\xF6', '\x3', 
		'\x2', '\x2', '\x2', '\xF9', '\xFC', '\x3', '\x2', '\x2', '\x2', '\xFA', 
		'\xF8', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xFB', '\x3', '\x2', '\x2', 
		'\x2', '\xFB', '-', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xFA', '\x3', 
		'\x2', '\x2', '\x2', '\xFD', '\x10B', '\a', '\"', '\x2', '\x2', '\xFE', 
		'\x10B', '\x5', '\x30', '\x19', '\x2', '\xFF', '\x100', '\a', ' ', '\x2', 
		'\x2', '\x100', '\x101', '\x5', '\x6', '\x4', '\x2', '\x101', '\x102', 
		'\a', '\x15', '\x2', '\x2', '\x102', '\x103', '\x5', ' ', '\x11', '\x2', 
		'\x103', '\x104', '\a', '\x16', '\x2', '\x2', '\x104', '\x10B', '\x3', 
		'\x2', '\x2', '\x2', '\x105', '\x10B', '\a', '\"', '\x2', '\x2', '\x106', 
		'\x10B', '\a', '\x18', '\x2', '\x2', '\x107', '\x10B', '\a', '\x1B', '\x2', 
		'\x2', '\x108', '\x10B', '\a', '\x19', '\x2', '\x2', '\x109', '\x10B', 
		'\a', '\x1A', '\x2', '\x2', '\x10A', '\xFD', '\x3', '\x2', '\x2', '\x2', 
		'\x10A', '\xFE', '\x3', '\x2', '\x2', '\x2', '\x10A', '\xFF', '\x3', '\x2', 
		'\x2', '\x2', '\x10A', '\x105', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x106', 
		'\x3', '\x2', '\x2', '\x2', '\x10A', '\x107', '\x3', '\x2', '\x2', '\x2', 
		'\x10A', '\x108', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x109', '\x3', 
		'\x2', '\x2', '\x2', '\x10B', '/', '\x3', '\x2', '\x2', '\x2', '\x10C', 
		'\x111', '\a', '\"', '\x2', '\x2', '\x10D', '\x10E', '\a', '\x15', '\x2', 
		'\x2', '\x10E', '\x10F', '\x5', ' ', '\x11', '\x2', '\x10F', '\x110', 
		'\a', '\x16', '\x2', '\x2', '\x110', '\x112', '\x3', '\x2', '\x2', '\x2', 
		'\x111', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x112', '\x113', '\x3', 
		'\x2', '\x2', '\x2', '\x113', '\x111', '\x3', '\x2', '\x2', '\x2', '\x113', 
		'\x114', '\x3', '\x2', '\x2', '\x2', '\x114', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\x35', '\x39', '\x46', 'R', 'U', '\\', '\x64', 'i', 'n', 
		't', 'x', '\x88', '\x91', '\x96', '\x9D', '\xA0', '\xAA', '\xB5', '\xC6', 
		'\xCD', '\xD5', '\xDD', '\xE5', '\xED', '\xF3', '\xFA', '\x10A', '\x113',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
